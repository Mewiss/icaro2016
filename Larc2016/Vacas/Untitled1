/*
/**
 * @function cornerHarris_Demo.cpp
 * @brief Demo code for detecting corners using Harris-Stephens method
 * @author OpenCV team
 */

#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"

#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace cv;
using namespace std;

/// Global variables
Mat src, src_gray;
int thresh = 90;
int max_thresh = 255;

const char* source_window = "Source image";
const char* corners_window = "Corners detected";

/// Function header
void cornerHarris_demo( int, void* );

static double angle( Point pt1, Point pt2, Point pt0 )
{
    double dx1 = pt1.x - pt0.x;
    double dy1 = pt1.y - pt0.y;
    double dx2 = pt2.x - pt0.x;
    double dy2 = pt2.y - pt0.y;
    return (dx1*dx2 + dy1*dy2)/sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}

static double cos( Point pt1, Point pt2)
{
    double dx1 = pt1.x ;
    double dy1 = pt1.y ;
    double dx2 = pt2.x ;
    double dy2 = pt2.y ;
    return (dx1*dx2 + dy1*dy2)/sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}

/**
 * @function main
 */
int main( int, char** argv )
{
  /// Load source image and convert it to gray
  //src = imread( argv[1], 1 );
  src = imread( "vaca2.jpg", 1 );
  resize(src,src,Size(src.cols/3,src.rows/3));
  cvtColor( src, src_gray, COLOR_BGR2GRAY );

  /// Create a window and a trackbar
  namedWindow( source_window, WINDOW_AUTOSIZE );
  createTrackbar( "Threshold: ", source_window, &thresh, max_thresh, cornerHarris_demo );
  imshow( source_window, src );

  cornerHarris_demo( 0, 0 );

  waitKey(0);
  return(0);
}

/**
 * @function cornerHarris_demo
 * @brief Executes the corner detection and draw a circle around the possible corners
 */
void cornerHarris_demo( int, void* )
{

  Mat dst, dst_norm, dst_norm_scaled,th;
  dst = Mat::zeros( src.size(), CV_32FC1 );



  /// Detector parameters
  int blockSize = 2;
  int apertureSize = 3;
  double k = 0.04;

  /// Detecting corners
  cornerHarris( src_gray, dst, blockSize, apertureSize, k, BORDER_DEFAULT );

  /// Normalizing
  normalize( dst, dst_norm, 0, 255, NORM_MINMAX, CV_32FC1, Mat() );
  convertScaleAbs( dst_norm, dst_norm_scaled );

  vector<Point> corners;
  vector<vector<int> > lines;
  /// Drawing a circle around corners
  for( int j = 0; j < dst_norm.rows ; j++ )
     { for( int i = 0; i < dst_norm.cols; i++ )
          {
            if( (int) dst_norm.at<float>(j,i) > thresh )
              {
               circle(  dst_norm_scaled, Point( i, j ), 5,  Scalar(0), 2, 8, 0 );
               corners.push_back(Point(i,j));
              }
          }
     }

    ///Identify lines

    for (int i=0; i<corners.size(); i++){

            vector<int> linea;
            linea.push_back(i);
            for (int j=i+1; j<corners.size(); j++){

            if(norm(Point(corners[j].x,0)-Point(corners[i].x,0))<10)// verificar
                {linea.push_back(j);
                //continue;
                }
                    }
        lines.push_back(linea);



            line(dst_norm_scaled,corners[linea[0]],corners[linea[linea.size()-1]],Scalar(0.5),1,8,0);
    }

  /// Showing the result
  namedWindow( corners_window, WINDOW_AUTOSIZE );
  imshow( corners_window, dst_norm_scaled );
}*/
